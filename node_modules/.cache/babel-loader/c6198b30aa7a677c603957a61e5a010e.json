{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\ReactModal\\\\src\\\\components\\\\role\\\\Group.js\";\nimport PropTypes from 'prop-types';\nimport { Text, Container, SelectContainer, OptionContainer } from './Role';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Group = _ref => {\n  let {\n    groupArr,\n    isCustom,\n    group\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: isCustom ? /*#__PURE__*/_jsxDEV(SelectContainer, {\n      children: groupArr.map(group => /*#__PURE__*/_jsxDEV(OptionContainer, {\n        value: group,\n        children: group\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Text, {\n      children: group\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Group;\nGroup.propTypes = {\n  groupArr: PropTypes.arrayOf(PropTypes.string).isRequired,\n  isCustom: PropTypes.bool.isRequired,\n  group: PropTypes.string\n};\nexport default Group;\n\nvar _c;\n\n$RefreshReg$(_c, \"Group\");","map":{"version":3,"sources":["C:/Users/user/ReactModal/src/components/role/Group.js"],"names":["PropTypes","Text","Container","SelectContainer","OptionContainer","Group","groupArr","isCustom","group","map","propTypes","arrayOf","string","isRequired","bool"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAT,EAAeC,SAAf,EAA0BC,eAA1B,EAA2CC,eAA3C,QAAkE,QAAlE;;;AAEA,MAAMC,KAAK,GAAG,QAAmC;AAAA,MAAlC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBC,IAAAA;AAAtB,GAAkC;AAC/C,sBACE,QAAC,SAAD;AAAA,cACGD,QAAQ,gBACP,QAAC,eAAD;AAAA,gBACGD,QAAQ,CAACG,GAAT,CAAcD,KAAD,iBACZ,QAAC,eAAD;AAAiB,QAAA,KAAK,EAAEA,KAAxB;AAAA,kBAAgCA;AAAhC;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADO,gBAOP,QAAC,IAAD;AAAA,gBAAOA;AAAP;AAAA;AAAA;AAAA;AAAA;AARJ;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CAdD;;KAAMH,K;AAeNA,KAAK,CAACK,SAAN,GAAkB;AAChBJ,EAAAA,QAAQ,EAAEN,SAAS,CAACW,OAAV,CAAkBX,SAAS,CAACY,MAA5B,EAAoCC,UAD9B;AAEhBN,EAAAA,QAAQ,EAAEP,SAAS,CAACc,IAAV,CAAeD,UAFT;AAGhBL,EAAAA,KAAK,EAAER,SAAS,CAACY;AAHD,CAAlB;AAKA,eAAeP,KAAf","sourcesContent":["import PropTypes from 'prop-types';\r\nimport { Text, Container, SelectContainer, OptionContainer } from './Role';\r\n\r\nconst Group = ({ groupArr, isCustom, group }) => {\r\n  return (\r\n    <Container>\r\n      {isCustom ? (\r\n        <SelectContainer>\r\n          {groupArr.map((group) => (\r\n            <OptionContainer value={group}>{group}</OptionContainer>\r\n          ))}\r\n        </SelectContainer>\r\n      ) : (\r\n        <Text>{group}</Text>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\nGroup.propTypes = {\r\n  groupArr: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  isCustom: PropTypes.bool.isRequired,\r\n  group: PropTypes.string,\r\n};\r\nexport default Group;\r\n"]},"metadata":{},"sourceType":"module"}